//! 红黑树
//!
//! 红黑树是一种自平衡二叉搜索树，通过对节点进行着色和旋转，红黑树可以很容易地保持树的平衡。
//! 我们需要在二叉搜索树上增加一个额外的颜色信息。节点可以被涂成红色或黑色。如果一棵二叉搜
//! 索树满足下面的全部5条性质，我们称之为红黑树。
//!   1. 任一节点要么是红色，要么是黑色。
//!   2. 根节点为黑色。
//!   3. 所有的叶节点(NIL 节点)为黑色。
//!   4. 如果一个节点为红色，则它的两个子节点都是黑色。
//!   5. 对任一节点，从它出发到所有叶子节点的路径上包含相同数量的黑色节点。
//!
//! 有很多集合(set)和 map 容器是使用红黑树来实现的。包括 C++ 标准 库 STL
//!
//! 红黑树，一种被广泛使用的自平衡二叉搜索树(self-adjusting balanced binary search tree)。
//! 另外一种自平衡树――AVL树。
//! splay树，它能够随着操作，逐渐把树变得越来越平衡。
//!
//! 保证树的平衡
//! 通过二叉树旋转，使二叉搜索树保持平衡。旋转操作可以在保持元素顺
//! 序(中序遍历结果不变)的前提下，改变树的结构，因此可以用来提高平衡性。
//!

pub trait RedBlackTree<T>
where
    T: std::cmp::PartialOrd,
{
    /// return true: insert success, false: not insert, exist k
    fn insert(&mut self, element: T) -> bool;
}
